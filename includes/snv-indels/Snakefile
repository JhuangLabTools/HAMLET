from os import path

# We need the QC-seq output
include: "../qc-seq/Snakefile"

localrules: plot_vars, table_vars_all, table_vars_hi

containers = {
    "bedtools-2.27-grep-2.14-gawk-5.0-click-7-python-3.7": "docker://quay.io/biocontainers/mulled-v2-a4b89e0b16b1d7db92e5a069e5c40405b3b53aab:98c4ac2f0e27869be58f6a4d8bb7ae3bc02a3a70-0",
    "debian": "docker://debian:buster-slim",
    "gsnap": "docker://quay.io/biocontainers/gmap:2014.12.23--pl5.22.0_4",
    "hamlet-scripts": "docker://lumc/hamlet-scripts:0.2",
    "picard": "docker://quay.io/biocontainers/picard:2.20.5--0",
    "python3": "docker://python:3.7.4-slim-stretch",
    "samtools": "docker://quay.io/biocontainers/samtools:1.6--h244ad75_4",
    "varscan-2.4.2-samtools-1.3.1-tabix-0.2.6-grep-2.14":
    "docker://quay.io/biocontainers/mulled-v2-58936b48a08c4e06505165c6f560ec9460b431ea:ef260d10ee671f4c7bd8e783939839bb2e0b684e-0",
    "vep": "docker://quay.io/biocontainers/ensembl-vep:97.3--pl526hecc5488_0"
}

settings=config["settings"]

# Set the default settings
def set_default(key, value):
    """ Set default value for settings """
    if key not in settings:
        settings[key] = value

set_default("genome_dict", settings["genome_fasta"].rsplit(".", 1)[0] + ".dict")
set_default("genome_fai", settings["genome_fasta"] + ".fai")
set_default("exon_cov_script", srcdir(path.join("scripts", "aggr_exon_cov.py")))
set_default("extract_script", srcdir(path.join("scripts", "vcf2json.py")))
set_default("csv_script", srcdir(path.join("scripts", "json2csv.py")))
set_default("plot_script", srcdir(path.join("scripts", "plotVariants.R")))

rule all_snv_indels:
    input:
        plots_mark=expand("{sample}/snv-indels/variant_plots/.done", sample=config["samples"]),
        stats=expand("{sample}/snv-indels/{sample}.aln_stats", sample=config["samples"]),
        var_json=expand("{sample}/snv-indels/{sample}.variants.json", sample=config["samples"]),
        cov_json=expand("{sample}/snv-indels/{sample}.exon_cov_stats.json", sample=config["samples"]),
        insert_stats=expand("{sample}/snv-indels/{sample}.insert_stats", sample=config["samples"]),
        insert_histo=expand("{sample}/snv-indels/{sample}.insert_stats.pdf", sample=config["samples"]),
        rna_stats=expand("{sample}/snv-indels/{sample}.rna_stats", sample=config["samples"]),
        rna_histo=expand("{sample}/snv-indels/{sample}.rna_stats.pdf", sample=config["samples"]),
        all_csv=expand("{sample}/snv-indels/{sample}.variants_all.csv", sample=config["samples"]),
        high_csv=expand("{sample}/snv-indels/{sample}.variants_hi.csv", sample=config["samples"])


rule align_vars:
    input:
        fq1="{sample}/{sample}-R1.fq.gz",
        fq2="{sample}/{sample}-R2.fq.gz",
        index=settings["genome_gmap_index"],
    output:
        sam=temp("{sample}/snv-indels/{sample}.snv-indel.raw.sam"),
    params:
        rg_sample="{sample}"
    threads: 8
    singularity: containers["gsnap"]
    shell:
        "gsnap --dir `dirname {input.index}` --db `basename {input.index}`"
        " --batch 4 --nthreads {threads}"
        " --novelsplicing 1 --npaths 1 --quiet-if-excessive"
        " --read-group-name={params.rg_sample} --read-group-id={params.rg_sample}"
        " --format sam --gunzip {input.fq1} {input.fq2} > {output.sam}"

rule sort_bamfile:
    input:
        sam="{sample}/snv-indels/{sample}.snv-indel.raw.sam",
    output:
        bam=temp("{sample}/snv-indels/{sample}.snv-indel.sort.bam"),
        bai=temp("{sample}/snv-indels/{sample}.snv-indel.sort.bai"),
    params:
        tmp=temp("tmp"),
    singularity: containers["picard"]
    shell:
        "picard -Xmx4G SortSam I={input.sam} O={output.bam} SORT_ORDER=coordinate "
        "VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true TMP_DIR={params.tmp}"


rule reorder_aln_header:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.sort.bam",
        bai="{sample}/snv-indels/{sample}.snv-indel.sort.bai",
        ref=settings["genome_fasta"],
        refd=settings["genome_dict"],
    output:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bai="{sample}/snv-indels/{sample}.snv-indel.bai",
    params:
        rg_sample="{sample}"
    threads: 1
    singularity: containers["picard"]
    shell:
        "picard -Xmx4G ReorderSam I={input.bam} O={output.bam} R={input.ref}"
        " VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true"

rule genome_txt:
    input:
        ref_dict=settings["genome_dict"],
    output:
        genome=temp(".tmp.genome.txt")
    singularity: containers["debian"]
    shell:
        " cat {input.ref_dict}"
        " | grep -P \"@SQ\\tSN:\""
        " | sed 's/@SQ\\tSN://'"
        " | sed 's/\\tLN:/\\t/'"
        " | cut -f1,2"
        " > {output.genome}"

rule exon_cov_ref:
    input:
        ref_fai=settings["genome_fai"],
        ref_refflat=settings["annotation_refflat"],
    output:
        bed=temp(".tmp.exon_cov_ref.bed")
    singularity: containers["bedtools-2.27-grep-2.14-gawk-5.0-click-7-python-3.7"]
    shell:
        "cat {input.ref_refflat}"
        " | grep -vP \"chr.*alt\t\""
        " | awk '{{ split($10, starts, \",\"); split($11, ends, \",\"); for (i=1; i < length(starts); i++) {{ print $3\"\\t\"starts[i]\"\\t\"ends[i]\"\\t\"gensub(/(\.[0-9]+)/,\"\", \"g\", $2)\"\\t\"i\"\\t\"$4 }} }}'"
        " | bedtools sort -faidx {input.ref_fai}"
        " > {output.bed}"

rule exon_cov:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bed=".tmp.exon_cov_ref.bed",
        genome=".tmp.genome.txt",
        idm=settings["ref_id_mapping"],
        scr=settings["exon_cov_script"]
    output:
        json="{sample}/snv-indels/{sample}.exon_cov_stats.json"
    singularity: containers["bedtools-2.27-grep-2.14-gawk-5.0-click-7-python-3.7"]
    shell:
        "bedtools coverage -d -sorted -g {input.genome} -a {input.bed} -b {input.bam}"
        " | cut -f1,2,3,4,5,8,7"
        " | python {input.scr} --id-mapping {input.idm} - {output.json}"

rule call_vars:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        ref=settings["genome_fasta"],
    output:
        vcf="{sample}/snv-indels/{sample}.raw.vcf.gz"
    threads: 3
    singularity: containers["varscan-2.4.2-samtools-1.3.1-tabix-0.2.6-grep-2.14"]
    shell:
        "samtools mpileup -f {input.ref} -d 1000000 -s -B {input.bam}"
        " | grep -vP '\\t\\t'"
        " | varscan mpileup2cns --strand-filter 0 --output-vcf 1 --min-var-freq 0.1 --p-value 0.05"
        " | grep -vP '\\t\./\.|\\t0/0'"
        " | bgzip -c > {output.vcf}"

rule aln_stats:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bai="{sample}/snv-indels/{sample}.snv-indel.bai",
        ref=settings["genome_fasta"],
        ref_dict=settings["genome_dict"],
    output:
        stats="{sample}/snv-indels/{sample}.aln_stats"
    threads: 1
    singularity: containers["picard"]
    shell:
        "picard -Xmx4G CollectAlignmentSummaryMetrics"
        " VALIDATION_STRINGENCY=LENIENT"
        " R={input.ref} I={input.bam} O={output.stats}"

rule insert_stats:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bai="{sample}/snv-indels/{sample}.snv-indel.bai",
        ref=settings["genome_fasta"],
        ref_dict=settings["genome_dict"],
    output:
        stats="{sample}/snv-indels/{sample}.insert_stats",
        histo="{sample}/snv-indels/{sample}.insert_stats.pdf",
    threads: 1
    singularity: containers["picard"]
    shell:
        "picard -Xmx4G CollectInsertSizeMetrics"
        " VALIDATION_STRINGENCY=LENIENT"
        " R={input.ref} I={input.bam} O={output.stats} H={output.histo}"

rule rna_stats:
    input:
        bam="{sample}/snv-indels/{sample}.snv-indel.bam",
        bai="{sample}/snv-indels/{sample}.snv-indel.bai",
        ref=settings["genome_fasta"],
        ref_dict=settings["genome_dict"],
        ref_rrna=settings["rrna_refflat"],
        annot=settings["annotation_refflat"],
    output:
        stats="{sample}/snv-indels/{sample}.rna_stats",
        histo="{sample}/snv-indels/{sample}.rna_stats.pdf",
    threads: 1
    singularity: containers["picard"]
    shell:
        "picard -Xmx4G CollectRnaSeqMetrics"
        " VALIDATION_STRINGENCY=LENIENT"
        " R={input.ref} REF_FLAT={input.annot}"
        " RIBOSOMAL_INTERVALS={input.ref_rrna}"
        " STRAND_SPECIFICITY=NONE ASSUME_SORTED=true"
        " CHART_OUTPUT={output.histo} I={input.bam} O={output.stats}"

rule annotate_vars:
    input:
        vcf="{sample}/snv-indels/{sample}.raw.vcf.gz",
        ref_1kg=settings["vcf_1kg"],
        ref_gonl=settings["vcf_gonl"],
        cache_vep=settings["cache_vep"],
        fasta_vep=settings["fasta_vep"],
    output:
        vcf="{sample}/snv-indels/{sample}.annotated.vcf.gz",
        stats="{sample}/snv-indels/{sample}.vep_stats.txt",
    threads: 8
    singularity: containers["vep"]
    shell:
        "vep -i {input.vcf}"
        " --fasta {input.fasta_vep} --dir {input.cache_vep}"
        " --custom {input.ref_1kg},P3,vcf,exact,0,AF,AFR_AF,AMR_AF,EAS_AF,EUR_AF,SAS_AF"
        " --custom {input.ref_gonl},GONL,vcf,exact,0,AF"
        " --fork {threads} --offline --cache_version 97 --assembly GRCh38 --everything --merged"
        " --allele_number --stats_text --vcf --cache --force_overwrite"
        " --stats_file {output.stats} -o STDOUT | bgzip -c > {output.vcf}"

rule extract_vars:
    input:
        vcf="{sample}/snv-indels/{sample}.annotated.vcf.gz",
        ref_hotspots=settings["bed_variant_hotspots"],
        ref_id_mapping=settings["ref_id_mapping"],
        scr=settings["extract_script"],
    output:
        json="{sample}/snv-indels/{sample}.variants.json",
    threads: 1
    singularity: containers["hamlet-scripts"]
    shell:
        "python3 {input.scr} --hotspots {input.ref_hotspots} --sample-id {wildcards.sample}"
        " {input.ref_id_mapping} {input.vcf} > {output.json}"

rule table_vars_all:
    input:
        json="{sample}/snv-indels/{sample}.variants.json",
        scr=settings["csv_script"],
    output:
        csv="{sample}/snv-indels/{sample}.variants_all.csv",
    threads: 1
    singularity: containers["hamlet-scripts"]
    shell:
        "python3 {input.scr} {input.json} > {output.csv}"

rule table_vars_hi:
    input:
        json="{sample}/snv-indels/{sample}.variants.json",
        scr=settings["csv_script"],
    output:
        csv="{sample}/snv-indels/{sample}.variants_hi.csv",
    threads: 1
    singularity: containers["hamlet-scripts"]
    shell:
        "python3 {input.scr} --hi {input.json} > {output.csv}"

rule plot_vars:
    input:
        json="{sample}/snv-indels/{sample}.variants.json",
        scr=settings["plot_script"],
        ref_id_mapping=settings["ref_id_mapping"],
        ref_hotspots=settings["bed_variant_hotspots"],
        ref_amplicons=settings["ref_amplicons"],
        ref_annot_goi=settings["ref_annot_goi"],
    params:
        plotd="{sample}/snv-indels/variant_plots",
    output:
        plots_mark="{sample}/snv-indels/variant_plots/.done",
    threads: 1
    singularity: containers["hamlet-scripts"]
    shell:
        "(Rscript {input.scr} -j {input.json}"
        " -i {input.ref_id_mapping} -m {input.ref_annot_goi}"
        " -a {input.ref_amplicons} -t {input.ref_hotspots}"
        " -o `dirname {params.plotd}` && touch {params.plotd}/.done)"
        " || rm -rf {params.plotd}"
